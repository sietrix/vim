Resume una vez hecho lo posterior para clonar en otra máquina:

Instalación:

    git clone git://github.com/nelstrom/dotvim.git ~/.vim

Creamos links simbolicos para que vim encuentre el fichero .vimrc en home:

    ln -s ~/.vim/vimrc ~/.vimrc
    ln -s ~/.vim/gvimrc ~/.gvimrc

Cambiamos de directorio a `~/.vim`, y actualizamos los submodules:

    cd ~/.vim
    git submodule init
    git submodule update


------------------------------------------------------------------------------
Guia para usar github como repositorio de vimrc y todos sus plugin

http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/

http://prisonernumbersix.com/2011/04/11/vim-github-y-pathogen/ (es lo que continua)

Vim, Git, GitHub y Pathogen
April 11, 2011DavidLeave a commentGo to comments
Cuando tienes más de una máquina y Vim (o cualquier otro programa) instalado en algunas de ellas, resulta tedioso ir copiando y manteniendo al día tu archivo de configuración (.vimrc) y los diversos plugins, archivos de sintaxis o esquemas de colores.

Una de las soluciones que usaba era DropBox. Tenía una carpeta donde lo guardaba todo e iba subiendo y bajando a base de linea de comandos. Bastante cómodo la verdad.

Usar un gestor de versiones no es una idea nueva. Hay gente que usa Subversion para gestionar documentación con bastante éxito.

Bueno, la idea es usar Git para ese control de versiones. Alojar el repositorio en GitHub por comodidad y usar Pathogen (es un plugin para Vim) para cierta “magia” con los plugins.

Lo primero es instalar Git y que éste responda desde la linea de comandos (hay miles de guías para hacerlo). Y luego tener una cuenta en GitHub (es gratuito). Vamos, uno de los requisitos es saber manejar Git de manera básica.

1.- Movemos nuestro .vimrc a ~/.vim/vimrc (sin el ‘.’, no hace falta que esté oculto)
	mv ~/.vimrc ~/.vim/vimrc

2.- Creamos un enlace simbólico para que Vim lo encuentre:
	ln -s ~/.vim/vimrc ~/.vimrc

3.- Hacemos que nuestro .vim sea un repositorio de Git y agregamos los archivos iniciales:
	1 cd ~/.vim
	2 git init
	3 git add .
	4 git commit -m "Commit inicial"
	4.- Instalamos “Pathogen“.

Para instalar Pathogen tan solo hay que guardar el archivo pathogen.vim en la carpeta: ~/.vim/autoload y agregar las dos lineas siguientes a nuestro .vimrc:
	1 call pathogen#runtime_append_all_bundles()
	2 call pathogen#helptags()
También creamos la carpeta ~/.vim/bundle

Ahí, en esa carpeta es donde vamos a ir guardando todos los plugins. La gracia de esto es que tenemos tooooodos los plugins que queramos pero en PATHs independientes. Cada uno en su carpeta, bien ordenados sin necesidad de crear archivos sueltos por todo el .vim

Basta descomprimir la carpeta de un plugin en bundle, PATHogen se encarga del resto. Pero la gracia de todo esto es que en el mismo GitHub vamos a encontrar miles de plugins y otros para Vim.

¿Que significa esto?

Que vamos a poder instalar plugins y poder actualizarlos desde Git.

¿Como?

Cada plugin irá instalado independientemente como un “submodulo” de Git en la carpeta bundle.

Se acabo tener los plugins sueltos y desactualizados y el desastre que suponía el proceder a borrar alguno. Ahora si no queremos un plugin simplemente borramos la carpeta con Git y listo.

Naturalmente no hace falta Git ni GitHub para trabajar con Pathogen, pero el complemento es perfecto.

5.- Creamos un repositorio en GitHub, vamos a suponer que lo llamamos “vimdots”

El proceso para crear un repositorio en GitHub viene perfectamente explicado en sus guías.

6.- Agregar repositorio remoto a nuestro repositorio local.

Esto es, asociar el repositorio que hemos creado en GitHub a lo que tenemos ya en nuestro repositorio “.vim” local. La orden sería:
	1 cd ~/.vim
	2 git remote add origin git@github.com:deibit/vimdots.git
	3 git push -u origin master

Por supuesto con el nombre de nuestra cuenta y el nombre del repositorio GitHub que le hemos dado.

7.- Agregamos plugins y creamos submodulos para ellos.

Lo ideal aquí sería encontrar los plugins que deseemos en GitHub y agregarlos simplemente con esta orden:

Vamos a usar como ejemplo el plugin vim-fugitive que nos integra Git en Vim.
	1 cd ~/.vim
	2 git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive

Lo recomendable después de agregar, como cualquier fichero, es hacer push:
	1 git commit -am "Agregado plugin vim-fugitive"
	2 git push -u origin master

Con esto vamos creando submodulos que son repositorios Git dentro de un repositorio Git.

Los submodulos se pueden actualizar de golpe con:
	1 git submodule update

ACTUALIZACIÓN

Se me olvidó comentar como hacemos para instalar este tinglado en otro ordenador. Es fácil. Lo primero es decirle a git que clone nuestro repositorio de GitHub en el directorio por defecto de Vim (~/.vim). Luego como nuestros plugins están en el directorio bundles y son a su vez repositorios de Git (ver el archivo .gitmodules) debemos de decirle a Git que proceda a instalarlos y actualizarlos también:
	1 git clone https://deibit@github.com/deibit/vimdots.git ~/.vim
	2 git submodule init
	3 git submodule update

Lo último es enlazar el vimrc de nuestro repositorio local en .vim al home que es donde Vim irá a buscarlo cuando arranque:
	1 ln -s ~/.vim/vimrc ~/.vimrc

